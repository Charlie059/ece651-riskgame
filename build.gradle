buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.3'
        classpath 'org.wisepersist:gwt-gradle-plugin:1.1.16'
        classpath 'org.gretty:gretty:3.0.7'
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.16'
    }
}

plugins {
    id 'com.bmuschko.clover' version '2.2.3'
}



allprojects{
    apply plugin: "eclipse"
    apply plugin: 'com.bmuschko.clover'
    version = '1.0'
    ext {
        appName = "riskgame"
        gdxVersion = '1.10.0'
        roboVMVersion = '2.3.16'
        box2DLightsVersion = '1.5'
        ashleyVersion = '1.7.4'
        aiVersion = '1.8.2'
        gdxControllersVersion = '2.2.1'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        clover 'org.openclover:clover:4.4.1'
    }
}


clover{
    compiler {
        additionalArgs = "-g:lines,source,vars"
    }
    report {
        xml=true
        html = true
    }
}
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
        }
    }
}



subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories {
        jcenter()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testImplementation "org.mockito:mockito-core:2.+"
        implementation 'org.json:json:20180813'
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    clover {
        compiler{
            additionalArgs = "-g:lines,source,vars"
        } }

    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
    }
    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
}

// Project specific stuff
project (':shared'){
}


project (':server'){
    dependencies {
        implementation project(':shared')
    }
}


project (':client'){
    dependencies {
        implementation project(':shared')
    }
}


project(":core") {

    apply plugin: "java-library"


    dependencies {
        //implementation project(':shared')
        api "com.badlogicgames.gdx:gdx:$gdxVersion"

    }
}




project(":desktop") {
    apply plugin: "java-library"
    project.ext.lwjglVersion = "3.3.1"
    project.ext.lwjglNatives = "natives-macos-arm64"

    repositories {
        mavenCentral()
    }

    dependencies {

        implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

        implementation "org.lwjgl:lwjgl"
        implementation "org.lwjgl:lwjgl-assimp"
        implementation "org.lwjgl:lwjgl-bgfx"
        implementation "org.lwjgl:lwjgl-cuda"
        implementation "org.lwjgl:lwjgl-egl"
        implementation "org.lwjgl:lwjgl-glfw"
        implementation "org.lwjgl:lwjgl-jawt"
        implementation "org.lwjgl:lwjgl-jemalloc"
        implementation "org.lwjgl:lwjgl-libdivide"
        implementation "org.lwjgl:lwjgl-llvm"
        implementation "org.lwjgl:lwjgl-lmdb"
        implementation "org.lwjgl:lwjgl-lz4"
        implementation "org.lwjgl:lwjgl-meow"
        implementation "org.lwjgl:lwjgl-meshoptimizer"
        implementation "org.lwjgl:lwjgl-nanovg"
        implementation "org.lwjgl:lwjgl-nfd"
        implementation "org.lwjgl:lwjgl-nuklear"
        implementation "org.lwjgl:lwjgl-odbc"
        implementation "org.lwjgl:lwjgl-openal"
        implementation "org.lwjgl:lwjgl-opencl"
        implementation "org.lwjgl:lwjgl-opengl"
        implementation "org.lwjgl:lwjgl-opengles"
        implementation "org.lwjgl:lwjgl-opus"
        implementation "org.lwjgl:lwjgl-par"
        implementation "org.lwjgl:lwjgl-remotery"
        implementation "org.lwjgl:lwjgl-rpmalloc"
        implementation "org.lwjgl:lwjgl-shaderc"
        implementation "org.lwjgl:lwjgl-spvc"
        implementation "org.lwjgl:lwjgl-stb"
        implementation "org.lwjgl:lwjgl-tinyexr"
        implementation "org.lwjgl:lwjgl-tinyfd"
        implementation "org.lwjgl:lwjgl-vma"
        implementation "org.lwjgl:lwjgl-vulkan"
        implementation "org.lwjgl:lwjgl-xxhash"
        implementation "org.lwjgl:lwjgl-yoga"
        implementation "org.lwjgl:lwjgl-zstd"
        runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-libdivide::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-llvm::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-lmdb::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-lz4::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-meow::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-meshoptimizer::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-opengles::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-opus::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-remotery::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-rpmalloc::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-spvc::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-tinyexr::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-tinyfd::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-vulkan::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-xxhash::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-yoga::$lwjglNatives"
        runtimeOnly "org.lwjgl:lwjgl-zstd::$lwjglNatives"
    }
    dependencies {
        //implementation project(':shared')
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"

    }
}

clover {
    report {
        xml=true
        html=true
    }
}
tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

