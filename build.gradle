buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-clover-plugin:3.0.3'
    }
}

plugins {
    id 'com.bmuschko.clover' version '2.2.3'
}



allprojects{
    repositories {
        mavenCentral()
    }
    apply plugin: 'com.bmuschko.clover'
    dependencies {
        clover 'org.openclover:clover:4.4.1'

    }
}
clover{
    compiler {
        additionalArgs = "-g:lines,source,vars"
    }
    report {
        xml=true
        html = true
    }
}
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
            subProject.configurations.each { configuration ->
                if(configuration.canBeResolved) {
                    configuration.resolve()
                }
            }
        }
    }
}



subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories {
        jcenter()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testImplementation "org.mockito:mockito-core:2.+"
        implementation 'org.json:json:20180813'
    }

    test {
        testLogging {
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    clover {
        compiler{
            additionalArgs = "-g:lines,source,vars"
        } }

    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
    }
    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
}

// Project specific stuff
project (':shared'){
}
project (':server'){
    dependencies {
        implementation project(':shared')
    }
}
project (':client'){
    dependencies {
        implementation project(':shared')
    }
}
clover {
    report {
        xml=true
        html=true
    }
}
tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

